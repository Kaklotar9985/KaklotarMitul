import os
import zipfile
import pandas as pd
#----------------------------------------------------------------------------------------------------------------------------------------------------------------------
# get_Nifty_Expiry  get_Nifty_Expiry  get_Nifty_Expiry  get_Nifty_Expiry  get_Nifty_Expiry  get_Nifty_Expiry  get_Nifty_Expiry  get_Nifty_Expiry
#----------------------------------------------------------------------------------------------------------------------------------------------------------------------
Market_day_List = ['01-01-2021', '04-01-2021', '05-01-2021', '06-01-2021', '07-01-2021', '08-01-2021', '11-01-2021', '12-01-2021', '13-01-2021', '14-01-2021', '15-01-2021', '18-01-2021', '19-01-2021', '20-01-2021', '21-01-2021', '22-01-2021', '25-01-2021', '27-01-2021', '28-01-2021', '29-01-2021', '01-02-2021', '02-02-2021', '03-02-2021', '04-02-2021', '05-02-2021', '08-02-2021', '09-02-2021', '10-02-2021', '11-02-2021', '12-02-2021', '15-02-2021', '16-02-2021', '17-02-2021', '18-02-2021', '19-02-2021', '22-02-2021', '23-02-2021', '24-02-2021', '25-02-2021', '26-02-2021', '01-03-2021', '02-03-2021', '03-03-2021', '04-03-2021', '05-03-2021', '08-03-2021', '09-03-2021', '10-03-2021', '12-03-2021', '15-03-2021', '16-03-2021', '17-03-2021', '18-03-2021', '19-03-2021', '22-03-2021', '23-03-2021', '24-03-2021', '25-03-2021', '26-03-2021', '30-03-2021', '31-03-2021', '01-04-2021', '05-04-2021', '06-04-2021', '07-04-2021', '08-04-2021', '09-04-2021', '12-04-2021', '13-04-2021', '15-04-2021', '16-04-2021', '19-04-2021', '20-04-2021', '22-04-2021', '23-04-2021', '26-04-2021', '27-04-2021', '28-04-2021', '29-04-2021', '30-04-2021', '03-05-2021', '04-05-2021', '05-05-2021', '06-05-2021', '07-05-2021', '10-05-2021', '11-05-2021', '12-05-2021', '14-05-2021', '17-05-2021', '18-05-2021', '19-05-2021', '20-05-2021', '21-05-2021', '24-05-2021', '25-05-2021', '26-05-2021', '27-05-2021', '28-05-2021', '31-05-2021', '01-06-2021', '02-06-2021', '03-06-2021', '04-06-2021', '07-06-2021', '08-06-2021', '09-06-2021', '10-06-2021', '11-06-2021', '14-06-2021', '15-06-2021', '16-06-2021', '17-06-2021', '18-06-2021', '21-06-2021', '22-06-2021', '23-06-2021', '24-06-2021', '25-06-2021', '28-06-2021', '29-06-2021', '30-06-2021', '01-07-2021', '02-07-2021', '05-07-2021', '06-07-2021', '07-07-2021', '08-07-2021', '09-07-2021', '12-07-2021', '13-07-2021', '14-07-2021', '15-07-2021', '16-07-2021', '19-07-2021', '20-07-2021', '22-07-2021', '23-07-2021', '26-07-2021', '27-07-2021', '28-07-2021', '29-07-2021', '30-07-2021', '02-08-2021', '03-08-2021', '04-08-2021', '05-08-2021', '06-08-2021', '09-08-2021', '10-08-2021', '11-08-2021', '12-08-2021', '13-08-2021', '16-08-2021', '17-08-2021', '18-08-2021', '20-08-2021', '23-08-2021', '24-08-2021', '25-08-2021', '26-08-2021', '27-08-2021', '30-08-2021', '31-08-2021', '01-09-2021', '02-09-2021', '03-09-2021', '06-09-2021', '07-09-2021', '08-09-2021', '09-09-2021', '13-09-2021', '14-09-2021', '15-09-2021', '16-09-2021', '17-09-2021', '20-09-2021', '21-09-2021', '22-09-2021', '23-09-2021', '24-09-2021', '27-09-2021', '28-09-2021', '29-09-2021', '30-09-2021', '01-10-2021', '04-10-2021', '05-10-2021', '06-10-2021', '07-10-2021', '08-10-2021', '11-10-2021', '12-10-2021', '13-10-2021', '14-10-2021', '18-10-2021', '19-10-2021', '20-10-2021', '21-10-2021', '22-10-2021', '25-10-2021', '26-10-2021', '27-10-2021', '28-10-2021', '29-10-2021', '01-11-2021', '02-11-2021', '03-11-2021', '04-11-2021', '08-11-2021', '09-11-2021', '10-11-2021', '11-11-2021', '12-11-2021', '15-11-2021', '16-11-2021', '17-11-2021', '18-11-2021', '22-11-2021', '23-11-2021', '24-11-2021', '25-11-2021', '26-11-2021', '29-11-2021', '30-11-2021', '01-12-2021', '02-12-2021', '03-12-2021', '06-12-2021', '07-12-2021', '08-12-2021', '09-12-2021', '10-12-2021', '13-12-2021', '14-12-2021', '15-12-2021', '16-12-2021', '17-12-2021', '20-12-2021', '21-12-2021', '22-12-2021', '23-12-2021', '24-12-2021', '27-12-2021', '28-12-2021', '29-12-2021', '30-12-2021', '31-12-2021',
                   '03-01-2022', '04-01-2022', '05-01-2022', '06-01-2022', '07-01-2022', '10-01-2022', '11-01-2022', '12-01-2022', '13-01-2022', '14-01-2022', '17-01-2022', '18-01-2022', '19-01-2022', '20-01-2022', '21-01-2022', '24-01-2022', '25-01-2022', '27-01-2022', '28-01-2022', '31-01-2022', '01-02-2022', '02-02-2022', '03-02-2022', '04-02-2022', '07-02-2022', '08-02-2022', '09-02-2022', '10-02-2022', '11-02-2022', '14-02-2022', '15-02-2022', '16-02-2022', '17-02-2022', '18-02-2022', '21-02-2022', '22-02-2022', '23-02-2022', '24-02-2022', '25-02-2022', '28-02-2022', '02-03-2022', '03-03-2022', '04-03-2022', '07-03-2022', '08-03-2022', '09-03-2022', '10-03-2022', '11-03-2022', '14-03-2022', '15-03-2022', '16-03-2022', '17-03-2022', '21-03-2022', '22-03-2022', '23-03-2022', '24-03-2022', '25-03-2022', '28-03-2022', '29-03-2022', '30-03-2022', '31-03-2022', '01-04-2022', '04-04-2022', '05-04-2022', '06-04-2022', '07-04-2022', '08-04-2022', '11-04-2022', '12-04-2022', '13-04-2022', '18-04-2022', '19-04-2022', '20-04-2022', '21-04-2022', '22-04-2022', '25-04-2022', '26-04-2022', '27-04-2022', '28-04-2022', '29-04-2022', '02-05-2022', '04-05-2022', '05-05-2022', '06-05-2022', '09-05-2022', '10-05-2022', '11-05-2022', '12-05-2022', '13-05-2022', '16-05-2022', '17-05-2022', '18-05-2022', '19-05-2022', '20-05-2022', '23-05-2022', '24-05-2022', '25-05-2022', '26-05-2022', '27-05-2022', '30-05-2022', '31-05-2022', '01-06-2022', '02-06-2022', '03-06-2022', '06-06-2022', '07-06-2022', '08-06-2022', '09-06-2022', '10-06-2022', '13-06-2022', '14-06-2022', '15-06-2022', '16-06-2022', '17-06-2022', '20-06-2022', '21-06-2022', '22-06-2022', '23-06-2022', '24-06-2022', '27-06-2022', '28-06-2022', '29-06-2022', '30-06-2022', '01-07-2022', '04-07-2022', '05-07-2022', '06-07-2022', '07-07-2022', '08-07-2022', '11-07-2022', '12-07-2022', '13-07-2022', '14-07-2022', '15-07-2022', '18-07-2022', '19-07-2022', '20-07-2022', '21-07-2022', '22-07-2022', '25-07-2022', '26-07-2022', '27-07-2022', '28-07-2022', '29-07-2022', '01-08-2022', '02-08-2022', '03-08-2022', '04-08-2022', '05-08-2022', '08-08-2022', '10-08-2022', '11-08-2022', '12-08-2022', '16-08-2022', '17-08-2022', '18-08-2022', '19-08-2022', '22-08-2022', '23-08-2022', '24-08-2022', '25-08-2022', '26-08-2022', '29-08-2022', '30-08-2022', '01-09-2022', '02-09-2022', '05-09-2022', '06-09-2022', '07-09-2022', '08-09-2022', '09-09-2022', '12-09-2022', '13-09-2022', '14-09-2022', '15-09-2022', '16-09-2022', '19-09-2022', '20-09-2022', '21-09-2022', '22-09-2022', '23-09-2022', '26-09-2022', '27-09-2022', '28-09-2022', '29-09-2022', '30-09-2022', '03-10-2022', '04-10-2022', '06-10-2022', '07-10-2022', '10-10-2022', '11-10-2022', '12-10-2022', '13-10-2022', '14-10-2022', '17-10-2022', '18-10-2022', '19-10-2022', '20-10-2022', '21-10-2022', '24-10-2022', '25-10-2022', '27-10-2022', '28-10-2022', '31-10-2022', '01-11-2022', '02-11-2022', '03-11-2022', '04-11-2022', '07-11-2022', '09-11-2022', '10-11-2022', '11-11-2022', '14-11-2022', '15-11-2022', '16-11-2022', '17-11-2022', '18-11-2022', '21-11-2022', '22-11-2022', '23-11-2022', '24-11-2022', '25-11-2022', '28-11-2022', '29-11-2022', '30-11-2022', '01-12-2022', '02-12-2022', '05-12-2022', '06-12-2022', '07-12-2022', '08-12-2022', '09-12-2022', '12-12-2022', '13-12-2022', '14-12-2022', '15-12-2022', '16-12-2022', '19-12-2022', '20-12-2022', '21-12-2022', '22-12-2022', '23-12-2022', '26-12-2022', '27-12-2022', '28-12-2022', '29-12-2022', '30-12-2022',
                   '02-01-2023', '03-01-2023', '04-01-2023', '05-01-2023', '06-01-2023', '09-01-2023', '10-01-2023', '11-01-2023', '12-01-2023', '13-01-2023', '16-01-2023', '17-01-2023', '18-01-2023', '19-01-2023', '20-01-2023', '23-01-2023', '24-01-2023', '25-01-2023', '27-01-2023', '30-01-2023', '31-01-2023', '01-02-2023', '02-02-2023', '03-02-2023', '06-02-2023', '07-02-2023', '08-02-2023', '09-02-2023', '10-02-2023', '13-02-2023', '14-02-2023', '15-02-2023', '16-02-2023', '17-02-2023', '20-02-2023', '21-02-2023', '22-02-2023', '23-02-2023', '24-02-2023', '27-02-2023', '28-02-2023', '01-03-2023', '02-03-2023', '03-03-2023', '06-03-2023', '08-03-2023', '09-03-2023', '10-03-2023', '13-03-2023', '14-03-2023', '15-03-2023', '16-03-2023', '17-03-2023', '20-03-2023', '21-03-2023', '22-03-2023', '23-03-2023', '24-03-2023', '27-03-2023', '28-03-2023', '29-03-2023', '31-03-2023', '03-04-2023', '05-04-2023', '06-04-2023', '10-04-2023', '11-04-2023', '12-04-2023', '13-04-2023', '17-04-2023', '18-04-2023', '19-04-2023', '20-04-2023', '21-04-2023', '24-04-2023', '25-04-2023', '26-04-2023', '27-04-2023', '28-04-2023', '02-05-2023', '03-05-2023', '04-05-2023', '05-05-2023', '08-05-2023', '09-05-2023', '10-05-2023', '11-05-2023', '12-05-2023', '15-05-2023', '16-05-2023', '17-05-2023', '18-05-2023', '19-05-2023', '22-05-2023', '23-05-2023', '24-05-2023', '25-05-2023', '26-05-2023', '29-05-2023', '30-05-2023', '31-05-2023', '01-06-2023', '02-06-2023', '05-06-2023', '06-06-2023', '07-06-2023', '08-06-2023', '09-06-2023', '12-06-2023', '13-06-2023', '14-06-2023', '15-06-2023', '16-06-2023', '19-06-2023', '20-06-2023', '21-06-2023', '22-06-2023', '23-06-2023', '26-06-2023', '27-06-2023', '28-06-2023', '30-06-2023', '03-07-2023', '04-07-2023', '05-07-2023', '06-07-2023', '07-07-2023', '10-07-2023', '11-07-2023', '12-07-2023', '13-07-2023', '14-07-2023', '17-07-2023', '18-07-2023', '19-07-2023', '20-07-2023', '21-07-2023', '24-07-2023', '25-07-2023', '26-07-2023', '27-07-2023', '28-07-2023', '31-07-2023', '01-08-2023', '02-08-2023', '03-08-2023', '04-08-2023', '07-08-2023', '08-08-2023', '09-08-2023', '10-08-2023', '11-08-2023', '14-08-2023', '16-08-2023', '17-08-2023', '18-08-2023', '21-08-2023', '22-08-2023', '23-08-2023', '24-08-2023', '25-08-2023', '28-08-2023', '29-08-2023', '30-08-2023', '31-08-2023', '01-09-2023', '04-09-2023', '05-09-2023', '06-09-2023', '07-09-2023', '08-09-2023', '11-09-2023', '12-09-2023', '13-09-2023', '14-09-2023', '15-09-2023', '18-09-2023', '20-09-2023', '21-09-2023', '22-09-2023', '25-09-2023', '26-09-2023', '27-09-2023', '28-09-2023', '29-09-2023', '03-10-2023', '04-10-2023', '05-10-2023', '06-10-2023', '09-10-2023', '10-10-2023', '11-10-2023', '12-10-2023', '13-10-2023', '16-10-2023', '17-10-2023', '18-10-2023', '19-10-2023', '20-10-2023', '23-10-2023', '25-10-2023', '26-10-2023', '27-10-2023', '30-10-2023', '31-10-2023', '01-11-2023', '02-11-2023', '03-11-2023', '06-11-2023', '07-11-2023', '08-11-2023', '09-11-2023', '10-11-2023', '12-11-2023', '13-11-2023', '15-11-2023', '16-11-2023', '17-11-2023', '20-11-2023', '21-11-2023', '22-11-2023', '23-11-2023', '24-11-2023', '28-11-2023', '29-11-2023', '30-11-2023', '01-12-2023', '04-12-2023', '05-12-2023', '06-12-2023', '07-12-2023', '08-12-2023', '11-12-2023', '12-12-2023', '13-12-2023', '14-12-2023', '15-12-2023', '18-12-2023', '19-12-2023', '20-12-2023', '21-12-2023', '22-12-2023', '26-12-2023', '27-12-2023', '28-12-2023', '29-12-2023',
                   '01-01-2024', '02-01-2024', '03-01-2024', '04-01-2024', '05-01-2024', '08-01-2024', '09-01-2024', '10-01-2024', '11-01-2024', '12-01-2024', '15-01-2024', '16-01-2024', '17-01-2024', '18-01-2024', '19-01-2024', '20-01-2024', '23-01-2024', '24-01-2024', '25-01-2024', '29-01-2024', '30-01-2024', '31-01-2024', '01-02-2024', '02-02-2024', '05-02-2024', '06-02-2024', '07-02-2024', '08-02-2024', '09-02-2024', '12-02-2024', '13-02-2024', '14-02-2024', '15-02-2024', '16-02-2024', '19-02-2024', '20-02-2024', '21-02-2024', '22-02-2024', '23-02-2024', '26-02-2024', '27-02-2024', '28-02-2024', '29-02-2024', '01-03-2024', '02-03-2024', '04-03-2024', '05-03-2024', '06-03-2024', '07-03-2024', '11-03-2024', '12-03-2024', '13-03-2024', '14-03-2024', '15-03-2024', '18-03-2024', '19-03-2024', '20-03-2024', '21-03-2024', '22-03-2024', '26-03-2024', '27-03-2024', '28-03-2024', '01-04-2024', '02-04-2024', '03-04-2024', '04-04-2024', '05-04-2024', '08-04-2024', '09-04-2024', '10-04-2024', '12-04-2024', '15-04-2024', '16-04-2024', '18-04-2024', '19-04-2024', '22-04-2024', '23-04-2024', '24-04-2024', '25-04-2024', '26-04-2024', '29-04-2024', '30-04-2024', '02-05-2024', '03-05-2024', '06-05-2024', '07-05-2024', '08-05-2024', '09-05-2024', '10-05-2024', '13-05-2024', '14-05-2024', '15-05-2024', '16-05-2024', '17-05-2024', '18-05-2024', '21-05-2024', '22-05-2024', '23-05-2024', '24-05-2024', '27-05-2024', '28-05-2024', '29-05-2024', '30-05-2024', '31-05-2024', '03-06-2024', '04-06-2024', '05-06-2024', '06-06-2024', '07-06-2024', '10-06-2024', '11-06-2024', '12-06-2024', '13-06-2024', '14-06-2024', '18-06-2024', '19-06-2024', '20-06-2024', '21-06-2024', '24-06-2024', '25-06-2024', '26-06-2024', '27-06-2024', '28-06-2024', '01-07-2024', '02-07-2024', '03-07-2024', '04-07-2024', '05-07-2024', '08-07-2024', '09-07-2024', '10-07-2024', '11-07-2024', '12-07-2024', '15-07-2024', '16-07-2024', '18-07-2024', '19-07-2024', '22-07-2024', '23-07-2024', '24-07-2024', '25-07-2024', '26-07-2024', '29-07-2024', '30-07-2024', '31-07-2024', '01-08-2024', '02-08-2024', '05-08-2024', '06-08-2024', '07-08-2024', '08-08-2024', '09-08-2024', '12-08-2024', '13-08-2024', '14-08-2024', '16-08-2024', '19-08-2024', '20-08-2024', '21-08-2024', '22-08-2024', '23-08-2024', '26-08-2024', '27-08-2024', '28-08-2024', '29-08-2024', '30-08-2024', '02-09-2024', '03-09-2024', '04-09-2024', '05-09-2024', '06-09-2024', '09-09-2024', '10-09-2024', '11-09-2024', '12-09-2024', '13-09-2024', '16-09-2024', '17-09-2024', '18-09-2024', '19-09-2024', '20-09-2024', '23-09-2024', '24-09-2024', '25-09-2024', '26-09-2024', '27-09-2024', '30-09-2024', '01-10-2024', '03-10-2024', '04-10-2024', '07-10-2024', '08-10-2024', '09-10-2024', '10-10-2024', '11-10-2024', '14-10-2024', '15-10-2024', '16-10-2024', '17-10-2024', '18-10-2024', '21-10-2024', '22-10-2024', '23-10-2024', '24-10-2024', '25-10-2024', '28-10-2024', '29-10-2024', '30-10-2024', '31-10-2024', '01-11-2024', '04-11-2024', '05-11-2024', '06-11-2024', '07-11-2024', '08-11-2024', '11-11-2024', '12-11-2024', '13-11-2024', '14-11-2024', '18-11-2024', '19-11-2024', '21-11-2024', '22-11-2024', '25-11-2024', '26-11-2024', '27-11-2024', '28-11-2024', '29-11-2024', '02-12-2024', '03-12-2024', '04-12-2024', '05-12-2024', '06-12-2024', '09-12-2024', '10-12-2024', '11-12-2024', '12-12-2024', '13-12-2024', '16-12-2024', '17-12-2024', '18-12-2024', '19-12-2024', '20-12-2024', '23-12-2024', '24-12-2024', '26-12-2024', '27-12-2024', '30-12-2024', '31-12-2024',
                   '01-01-2025', '02-01-2025', '03-01-2025', '06-01-2025', '07-01-2025', '08-01-2025', '09-01-2025', '10-01-2025', '13-01-2025', '14-01-2025', '15-01-2025', '16-01-2025', '17-01-2025', '20-01-2025', '21-01-2025', '22-01-2025', '23-01-2025', '24-01-2025', '27-01-2025', '28-01-2025', '29-01-2025', '30-01-2025', '31-01-2025', '01-02-2025', '03-02-2025', '04-02-2025', '05-02-2025', '06-02-2025', '07-02-2025', '10-02-2025', '11-02-2025', '12-02-2025', '13-02-2025', '14-02-2025', '17-02-2025', '18-02-2025', '19-02-2025', '20-02-2025', '21-02-2025', '24-02-2025', '25-02-2025', '27-02-2025', '28-02-2025', '03-03-2025', '04-03-2025', '05-03-2025', '06-03-2025', '07-03-2025', '10-03-2025', '11-03-2025', '12-03-2025', '13-03-2025', '17-03-2025', '18-03-2025', '19-03-2025', '20-03-2025', '21-03-2025', '24-03-2025', '25-03-2025', '26-03-2025', '27-03-2025', '28-03-2025', '01-04-2025', '02-04-2025', '03-04-2025', '04-04-2025', '07-04-2025', '08-04-2025', '09-04-2025', '11-04-2025', '15-04-2025', '16-04-2025', '17-04-2025', '21-04-2025', '22-04-2025', '23-04-2025', '24-04-2025', '25-04-2025', '28-04-2025', '29-04-2025', '30-04-2025', '02-05-2025', '05-05-2025', '06-05-2025', '07-05-2025', '08-05-2025', '09-05-2025', '12-05-2025', '13-05-2025', '14-05-2025', '15-05-2025', '16-05-2025', '19-05-2025', '20-05-2025', '21-05-2025', '22-05-2025', '23-05-2025', '26-05-2025', '27-05-2025', '28-05-2025', '29-05-2025', '30-05-2025', '02-06-2025', '03-06-2025', '04-06-2025', '05-06-2025', '06-06-2025', '09-06-2025', '10-06-2025', '11-06-2025', '12-06-2025', '13-06-2025', '16-06-2025', '17-06-2025', '18-06-2025', '19-06-2025', '20-06-2025', '23-06-2025', '24-06-2025', '25-06-2025', '26-06-2025', '27-06-2025', '30-06-2025', '01-07-2025', '02-07-2025', '03-07-2025', '04-07-2025', '07-07-2025', '08-07-2025', '09-07-2025', '10-07-2025', '11-07-2025', '14-07-2025', '15-07-2025', '16-07-2025', '17-07-2025', '18-07-2025', '21-07-2025', '22-07-2025', '23-07-2025', '24-07-2025', '25-07-2025', '28-07-2025', '29-07-2025', '30-07-2025', '31-07-2025', '01-08-2025', '04-08-2025', '05-08-2025', '06-08-2025', '07-08-2025', '08-08-2025', '11-08-2025', '12-08-2025', '13-08-2025', '14-08-2025', '18-08-2025', '19-08-2025', '20-08-2025', '21-08-2025', '22-08-2025', '25-08-2025', '26-08-2025', '28-08-2025', '29-08-2025', '01-09-2025', '02-09-2025', '03-09-2025', '04-09-2025', '05-09-2025', '08-09-2025', '09-09-2025', '10-09-2025', '11-09-2025', '12-09-2025', '15-09-2025']

nifty_monthly_expiry     = ['28-01-2021', '25-02-2021', '25-03-2021', '29-04-2021', '27-05-2021', '24-06-2021', '29-07-2021', '26-08-2021', '30-09-2021', '28-10-2021', '25-11-2021', '30-12-2021',
                            '27-01-2022', '24-02-2022', '31-03-2022', '28-04-2022', '26-05-2022', '30-06-2022', '28-07-2022', '25-08-2022', '29-09-2022', '27-10-2022', '24-11-2022', '29-12-2022',
                            '25-01-2023', '23-02-2023', '29-03-2023', '27-04-2023', '25-05-2023', '28-06-2023', '27-07-2023', '31-08-2023', '28-09-2023', '26-10-2023', '30-11-2023', '28-12-2023',
                            '25-01-2024', '29-02-2024', '28-03-2024', '25-04-2024', '30-05-2024', '27-06-2024', '25-07-2024', '29-08-2024', '26-09-2024', '31-10-2024', '28-11-2024', '26-12-2024',
                            '30-01-2025', '27-02-2025', '27-03-2025', '24-04-2025', '29-05-2025', '26-06-2025', '31-07-2025', '28-08-2025', '30-09-2025', '28-10-2025', '25-11-2025', '29-12-2025' ]

nifty_weekly_expiry      = ['07-01-2021', '14-01-2021', '21-01-2021', '28-01-2021', '04-02-2021', '11-02-2021', '18-02-2021', '25-02-2021', '04-03-2021', '10-03-2021', '18-03-2021', '25-03-2021', '01-04-2021', '08-04-2021', '15-04-2021', '22-04-2021', '29-04-2021', '06-05-2021', '12-05-2021', '20-05-2021', '27-05-2021', '03-06-2021', '10-06-2021', '17-06-2021', '24-06-2021', '01-07-2021', '08-07-2021', '15-07-2021', '22-07-2021', '29-07-2021', '05-08-2021', '12-08-2021', '18-08-2021', '26-08-2021', '02-09-2021', '09-09-2021', '16-09-2021', '23-09-2021', '30-09-2021', '07-10-2021', '14-10-2021', '21-10-2021', '28-10-2021', '03-11-2021', '11-11-2021', '18-11-2021', '25-11-2021', '02-12-2021', '09-12-2021', '16-12-2021', '23-12-2021', '30-12-2021',
                            '06-01-2022', '13-01-2022', '20-01-2022', '27-01-2022', '03-02-2022', '10-02-2022', '17-02-2022', '24-02-2022', '03-03-2022', '10-03-2022', '17-03-2022', '24-03-2022', '31-03-2022', '07-04-2022', '13-04-2022', '21-04-2022', '28-04-2022', '05-05-2022', '12-05-2022', '19-05-2022', '26-05-2022', '02-06-2022', '09-06-2022', '16-06-2022', '23-06-2022', '30-06-2022', '07-07-2022', '14-07-2022', '21-07-2022', '28-07-2022', '04-08-2022', '11-08-2022', '18-08-2022', '25-08-2022', '01-09-2022', '08-09-2022', '15-09-2022', '22-09-2022', '29-09-2022', '06-10-2022', '13-10-2022', '20-10-2022', '27-10-2022', '03-11-2022', '10-11-2022', '17-11-2022', '24-11-2022', '01-12-2022', '08-12-2022', '15-12-2022', '22-12-2022', '29-12-2022',
                            '05-01-2023', '12-01-2023', '19-01-2023', '25-01-2023', '02-02-2023', '09-02-2023', '16-02-2023', '23-02-2023', '02-03-2023', '09-03-2023', '16-03-2023', '23-03-2023', '29-03-2023', '06-04-2023', '13-04-2023', '20-04-2023', '27-04-2023', '04-05-2023', '11-05-2023', '18-05-2023', '25-05-2023', '01-06-2023', '08-06-2023', '15-06-2023', '22-06-2023', '28-06-2023', '06-07-2023', '13-07-2023', '20-07-2023', '27-07-2023', '03-08-2023', '10-08-2023', '17-08-2023', '24-08-2023', '31-08-2023', '07-09-2023', '14-09-2023', '21-09-2023', '28-09-2023', '05-10-2023', '12-10-2023', '19-10-2023', '26-10-2023', '02-11-2023', '09-11-2023', '16-11-2023', '23-11-2023', '30-11-2023', '07-12-2023', '14-12-2023', '21-12-2023', '28-12-2023',
                            '04-01-2024', '11-01-2024', '18-01-2024', '25-01-2024', '01-02-2024', '08-02-2024', '15-02-2024', '22-02-2024', '29-02-2024', '07-03-2024', '14-03-2024', '21-03-2024', '28-03-2024', '04-04-2024', '10-04-2024', '18-04-2024', '25-04-2024', '02-05-2024', '09-05-2024', '16-05-2024', '23-05-2024', '30-05-2024', '06-06-2024', '13-06-2024', '20-06-2024', '27-06-2024', '04-07-2024', '11-07-2024', '18-07-2024', '25-07-2024', '01-08-2024', '08-08-2024', '14-08-2024', '22-08-2024', '29-08-2024', '05-09-2024', '12-09-2024', '19-09-2024', '26-09-2024', '03-10-2024', '10-10-2024', '17-10-2024', '24-10-2024', '31-10-2024', '07-11-2024', '14-11-2024', '21-11-2024', '28-11-2024', '05-12-2024', '12-12-2024', '19-12-2024', '26-12-2024',
                            '02-01-2025', '09-01-2025', '16-01-2025', '23-01-2025', '30-01-2025', '06-02-2025', '13-02-2025', '20-02-2025', '27-02-2025', '06-03-2025', '13-03-2025', '20-03-2025', '27-03-2025', '03-04-2025', '09-04-2025', '17-04-2025', '24-04-2025', '30-04-2025', '08-05-2025', '15-05-2025', '22-05-2025', '29-05-2025', '05-06-2025', '12-06-2025', '19-06-2025', '26-06-2025', '03-07-2025', '10-07-2025', '17-07-2025', '24-07-2025', '31-07-2025', '07-08-2025', '14-08-2025', '21-08-2025', '28-08-2025', '02-09-2025', '09-09-2025', '16-09-2025', '23-09-2025', '30-09-2025', '07-10-2025', '14-10-2025', '21-10-2025', '28-10-2025'  ]

# get_Nifty_Expiry
def get_Expiry(Dates, Symbol, Expiry_Period, Expiry_Type):
    global nifty_monthly_expiry, nifty_weekly_expiry
    try:
        if Expiry_Period.lower() == "weekiy" and Symbol.lower() == "nifty" :
          Expiry_List = nifty_weekly_expiry

        if Expiry_Period.lower() == "monthly":
          if Symbol.lower() == "nifty":
              Expiry_List = nifty_monthly_expiry
          # if Symbol.lower() == "banknifty":
          #     Expiry_List = banknifty_monthly_expiry

        try:
          Date = pd.to_datetime(Dates, format="%d-%m-%Y")
        except:
          try:
              Date = pd.to_datetime(Dates, format="%d-%m-%Y %H:%M")
          except:
              Date = pd.to_datetime(Dates, format="%Y-%m-%d %H:%M:%S")

        Expiry_List = pd.to_datetime(pd.Series(Expiry_List), format="%d-%m-%Y")
        filtered = Expiry_List[Expiry_List >= Date].dt.strftime("%d-%m-%Y").tolist()
        if Expiry_Type.lower() == "current":
          Date = filtered[0]
        if Expiry_Type.lower() == "next":
          Date = filtered[1]
        return Date
    except Exception as e:
        print(f"get_Expiry Function Error: {e}")
        return None

# # Example usage
# Dates          = "05-01-2024"
# Symbol         = "banknifty" # nifty  banknifty
# Expiry_Period  = "Monthly"  # "Weekiy" , "Monthly"
# Expiry_Type    = "Current"  # "Current", "Next"
# Expirys        = get_Expiry(Dates, Symbol, Expiry_Period, Expiry_Type)
# print(Expirys)
#====================================================================================================================================================================
from datetime import datetime

def get_weekly_number(date_str):
    global nifty_monthly_expiry, nifty_weekly_expiry
    try:
        try:
            given_date = datetime.strptime(date_str, "%d-%m-%Y")
        except:
            try:
                given_date = datetime.strptime(date_str, "%d-%m-%Y %H:%M")
            except:
                given_date = datetime.strptime(date_str, "%Y-%m-%d %H:%M:%S")

        monthly_dt   = [datetime.strptime(d, "%d-%m-%Y") for d in nifty_monthly_expiry]
        weekly_dt    = [datetime.strptime(d, "%d-%m-%Y") for d in nifty_weekly_expiry]
        # 🔹 monthly handle karo
        prev_monthly = max([d for d in monthly_dt if d < given_date], default=None)
        if prev_monthly is None:
            Stat_Moth = given_date.month
            Stat_Year = given_date.year
            prev_monthly = datetime.strptime(f"01-{Stat_Moth}-{Stat_Year}", "%d-%m-%Y")   # ✅ Fix

        next_monthly = min([d for d in monthly_dt if d > prev_monthly], default=None)
        if next_monthly is None:
            Stat_Moth = given_date.month
            Stat_Year = given_date.year
            next_monthly = datetime.strptime(f"28-{Stat_Moth}-{Stat_Year}", "%d-%m-%Y")

        weekly_between = [d for d in weekly_dt if prev_monthly < d <= next_monthly]
        weekly_between_sorted = sorted(weekly_between)
        reversed_weekly = list(reversed(weekly_between_sorted))
        weekly_dict = {d: idx for idx, d in enumerate(reversed_weekly)}
        # DT = pd.DataFrame(list(weekly_dict.items()), columns=['Date', 'Number'] )
        # print(tabulate(DT.head(10), headers="keys", tablefmt="pretty", showindex=False))
        current_expiry = min([d for d in weekly_dt if d >= given_date], default=None)
        if current_expiry is None:
            return None
        return weekly_dict.get(current_expiry)
    except Exception as e:
        print(f"get_weekly_number Function Error: {e}")
        return None

# # Example usage
# print(get_weekly_number("01-01-2021"))  # Expected: 3
# print(get_weekly_number("11-01-2024"))  # Expected: 2
# print(get_weekly_number("18-01-2024"))  # Expected: 1
# print(get_weekly_number("25-01-2024"))  # Expected: 0
#====================================================================================================================================================================
from datetime import datetime
from tabulate import tabulate
import pandas as pd

def get_Day_number(date_str):
    global Market_day_List, nifty_monthly_expiry, nifty_weekly_expiry
    try:
        # 🔹 Date parsing
        try:
            given_date = datetime.strptime(date_str, "%d-%m-%Y")
        except:
            try:
                given_date = datetime.strptime(date_str, "%d-%m-%Y %H:%M")
            except:
                given_date = datetime.strptime(date_str, "%Y-%m-%d %H:%M:%S")

        # 🔹 Convert monthly expiry and market days
        monthly_dt = [datetime.strptime(d, "%d-%m-%Y") for d in nifty_monthly_expiry]
        date_dt    = [datetime.strptime(d, "%d-%m-%Y") for d in Market_day_List]


        # 🔹 monthly handle karo
        prev_monthly = max([d for d in monthly_dt if d < given_date], default=None)
        if prev_monthly is None:
            Stat_Moth = given_date.month
            Stat_Year = given_date.year
            prev_monthly = datetime.strptime(f"01-{Stat_Moth}-{Stat_Year}", "%d-%m-%Y")   # ✅ Fix

        next_monthly = min([d for d in monthly_dt if d > prev_monthly], default=None)
        if next_monthly is None:
            Stat_Moth = given_date.month
            Stat_Year = given_date.year
            next_monthly = datetime.strptime(f"28-{Stat_Moth}-{Stat_Year}", "%d-%m-%Y")

        days_between = [d for d in date_dt if prev_monthly <= d <= next_monthly]
        days_between_sorted = sorted(days_between)
        reversed_days = list(reversed(days_between_sorted))
        date_dict = {d: idx for idx, d in enumerate(reversed_days)}

        # DT = pd.DataFrame(list(date_dict.items()), columns=['Date', 'Number'])
        # print(tabulate(DT, headers="keys", tablefmt="pretty", showindex=False))

        current_day = given_date if given_date in date_dict else None

        if current_day is None:
            return None
        return date_dict.get(current_day)

    except Exception as e:
        print(f"get_Day_number Function Error: {e}")
        return None


# # Example usage
# print(get_Day_number("27-01-2021"))  # Expected: 15
# print(get_Day_number("11-01-2024"))  # Expected: 10
# print(get_Day_number("18-01-2024"))  # Expected: 5
# print(get_Day_number("25-01-2024"))  # Expected: 0
#====================================================================================================================================================================

def Brokerage_Calculate(buy_price, sell_price, quantity, Options_Type="OP", Min_Brokerage = 20):
    try:
        turnover = (buy_price + sell_price) * quantity               # **Turnover Calculation**
        if Options_Type.lower() == "fu":  # **Futures Calculation**
            brokerage = min(0.0003 * turnover, Min_Brokerage) * 2    # ₹20 प्रति ऑर्डर, दोनों ओर के लिए ₹40
            stt = 0.0002 * sell_price * quantity                     # 0.02% केवल Sell Side
            transaction_charges = 0.0000183 * turnover               # 0.00183% NSE Transaction Charges
            sebi_charges = (10 / 10000000) * turnover                # ₹10 प्रति करोड़
            stamp_duty = round((0.00002 * buy_price * quantity),0)   # 0.002% (₹200/Crore) on Buy Side
        elif Options_Type.lower() == "call" or Options_Type.lower() == "put" or Options_Type.lower() == "op" : # **Options Calculation**
            option_premium = (buy_price + sell_price)
            turnover = option_premium * quantity
            brokerage = Min_Brokerage * 2                             # ₹20 प्रति ऑर्डर, दोनों ओर के लिए ₹40
            stt = 0.0005 * option_premium * quantity                  # 0.05% STT केवल Sell Side
            transaction_charges = 0.0003553 * turnover                # 0.03603% NSE Transaction Charges
            sebi_charges = (10 / 10000000) * turnover                 # ₹10 प्रति करोड़
            stamp_duty = round((0.00003 * buy_price * quantity),0)    # 0.003% (₹300/Crore) on Buy Side
        gst = 0.18 * (brokerage + transaction_charges + sebi_charges) # GST Calculation
        total_charges = brokerage + stt + transaction_charges + gst + sebi_charges + stamp_duty
        return round(total_charges, 2)
    except Exception as e:
        print(f"Brokerage_Calculate Function Error: {e}")
        return 0

# # Example usage
# # **Example Calculation for Futures**
# futures_result = Brokerage_Calculate(buy_price=25000, sell_price=25000, quantity=300, segment="FU")
# print(f"Futures Charges: {futures_result:.2f}")
# # **Example Calculation for Options**
# options_result = Brokerage_Calculate(buy_price=200, sell_price=200, quantity=300 , segment="OP")
# print(f"Options Charges: {options_result:.2f}")
#====================================================================================================================================================================

def process_trade(Data, i, New_Quantity=0):
    try:
        Date         = pd.to_datetime(str(Data['Trigger Date'].iloc[i]), format="%d/%m/%Y").strftime('%d-%m-%Y')
        Time         = pd.to_datetime(str(Data[' Trigger Time'].iloc[i]), format="%H:%M:%S").strftime('%H:%M')
        Instrument   = Data[' Instrument'].iloc[i]
        BuySell      = Data['Buy/Sell'].iloc[i]
        Quantity     = Data['Quantity'].iloc[i]
        Price        = Data['Price'].iloc[i]
        Trigger_type = Data['Trigger type'].iloc[i]

        P_Date         = pd.to_datetime(str(Data['Trigger Date'].iloc[i-1]), format="%d/%m/%Y").strftime('%d-%m-%Y')
        P_Time         = pd.to_datetime(str(Data[' Trigger Time'].iloc[i-1]), format="%H:%M:%S").strftime('%H:%M')
        P_Instrument   = Data[' Instrument'].iloc[i-1]
        P_BuySell      = Data['Buy/Sell'].iloc[i-1]
        P_Quantity     = Data['Quantity'].iloc[i-1]
        P_Price        = Data['Price'].iloc[i-1]
        P_Trigger_type = Data['Trigger type'].iloc[i-1]

        Strike = Instrument[-7:-2]
        option = Instrument[-2:]

        if Instrument == P_Instrument and P_BuySell == "SELL" and BuySell == "BUY" :
          QTY         = New_Quantity if New_Quantity != 0 else Quantity
          Entry_Price = round(float(P_Price),2)
          Exit_Price  = round(float(Price),2)
          Brokerage   = Brokerage_Calculate(buy_price=Exit_Price, sell_price=Entry_Price, quantity=QTY, Options_Type="OP")
          Net_PNL     = round((float(Entry_Price) - float(Exit_Price))*QTY,2)
          PNL         = round(Net_PNL - Brokerage,2)

          Expiry_Weekiy_Current  = get_Expiry(P_Date, "Nifty", "Weekiy", "Current")
          Expiry_Weekiy_Next  = get_Expiry(P_Date, "Nifty", "Weekiy", "Next")
          Expiry_Monthly_Current = get_Expiry(P_Date, "Nifty", "Monthly", "Current") 
          
          Weekly_No              = get_weekly_number(P_Date)
          Day_No                 = get_Day_number(P_Date)

          Entry_Date   = pd.to_datetime(P_Date, format="%d-%m-%Y")
          Day          = Entry_Date.day
          Month        = Entry_Date.month
          Quarter      = Entry_Date.quarter
          Year         = Entry_Date.year

          Datas = {"Entry_DateTime": (P_Date+" "+P_Time), "Exit_DateTime":(Date+" "+Time),"Instrument" : Instrument,
                  "Strike" : Strike , "option" : option, "BuySell" : P_BuySell,"Quantity" : QTY, "Entry_Price" : Entry_Price,
                  "Exit_Price" : Exit_Price, "Net_PNL" : Net_PNL, "Brokerage" : Brokerage, "PNL" : PNL, "Trigger_type" : Trigger_type,
                  "Expiry_Weekiy_Current" : Expiry_Weekiy_Current, "Expiry_Weekiy_Next" : Expiry_Weekiy_Next, "Expiry_Monthly_Current": Expiry_Monthly_Current,
                  "Weekly_No" : Weekly_No, "Day_No" : Day_No, "Day": Day, "Month": Month, "Quarter": Quarter, "Year": Year }
          return Datas
    except Exception as e:
        print(f"process_trade Function Error: {e}")
        return 0

#====================================================================================================================================================================
def process_Analysis_Data(Data_List,Backtest_Name):
    try:
      # Convert Data_List to DataFrame
      Analysis_Data = pd.DataFrame(Data_List)
      Analysis_Data.drop_duplicates(inplace=True)
      Analysis_Data["Entry_DateTime"] = pd.to_datetime(Analysis_Data["Entry_DateTime"], format="%d-%m-%Y %H:%M")
      Analysis_Data["Exit_DateTime"] = pd.to_datetime(Analysis_Data["Exit_DateTime"], format="%d-%m-%Y %H:%M")
      Analysis_Data.sort_values(by=["Entry_DateTime", "option"], ascending=True, inplace=True)
      Analysis_Data.reset_index(drop=True, inplace=True)
      Analysis_Data["drawdown"] = 0.0
      for i in range(0, len(Analysis_Data)):
          if i >= 1:
              running_total = Analysis_Data.loc[i - 1, "drawdown"] + Analysis_Data.loc[i, "PNL"]
              Analysis_Data.loc[i, "drawdown"] = round((running_total if running_total < 0 else 0.0), 2)
      Analysis_Data["Entry_DateTime"] = Analysis_Data["Entry_DateTime"].dt.strftime('%d-%m-%Y %H:%M')
      Analysis_Data["Exit_DateTime"]  = Analysis_Data["Exit_DateTime"].dt.strftime('%d-%m-%Y %H:%M')
      Analysis_Data["Backtest_Name"] = Backtest_Name 
      pivot_yearly = pd.pivot_table(Analysis_Data,values="Net_PNL", index=["Year"], columns="Weekly_No",
                            aggfunc="sum", fill_value=0, margins=True, margins_name="Grand Total" )
      pivot_weekly = pd.pivot_table(Analysis_Data,values="Net_PNL", index=["Year", "Quarter"], columns="Weekly_No",
                            aggfunc="sum", fill_value=0, margins=True, margins_name="Grand Total" )
      pivot_day = pd.pivot_table(Analysis_Data,values="Net_PNL", index=["Year", "Quarter"], columns="Day_No",
                            aggfunc="sum", fill_value=0, margins=True, margins_name="Grand Total" )
      # Save cleaned file
      File_Name = f"{Backtest_Name}.xlsx"
      File_Name2 = f"{Backtest_Name}.csv"
      Analysis_Data.to_csv(File_Name2, index=False)
      with pd.ExcelWriter(File_Name) as writer:
          Analysis_Data.to_excel(writer, sheet_name="Analysis_Data", index=False)
          pivot_yearly.to_excel(writer, sheet_name="Yearly_No")
          pivot_weekly.to_excel(writer, sheet_name="Weekly_No")
          pivot_day.to_excel(writer, sheet_name="Day_No")
      return File_Name
    except Exception as e:
        print(f"process_trade_data Function Error: {e}")
        return None
#====================================================================================================================================================================

def Read_CSV(input_path, New_Quantity):
    Data_List = []
    if os.path.isdir(input_path):
        # 🔹 Agar folder hai
        csv_All_files = [file for file in os.listdir(input_path) if file.endswith('.csv')]
        for file in csv_All_files:
            file_path = os.path.join(input_path, file)
            Data = pd.read_csv(file_path)
            for i in range(len(Data)):
                Datas = process_trade(Data, i, New_Quantity)
                if Datas:
                    Data_List.append(Datas)

    elif input_path.endswith(".zip") and os.path.exists(input_path):
        # 🔹 Agar zip file hai
        with zipfile.ZipFile(input_path, 'r') as z:
            csv_All_files = [f for f in z.namelist() if f.endswith('.csv')]
            for file in csv_All_files:
                with z.open(file) as f:
                    Data = pd.read_csv(f)
                    for i in range(len(Data)):
                        Datas = process_trade(Data, i, New_Quantity)
                        if Datas:
                            Data_List.append(Datas)
    else:
        raise ValueError("❌ Input path sahi nahi hai (na folder, na zip).")
    return Data_List


'''
import os
import zipfile
import pandas as pd
from google.colab import files


input_path = "/content/mk.zip"   # ya "/content/mk"

Backtest_Name = "2"


New_Quantity = 0
# 🔹 Run function
Data_List = Read_CSV(input_path, New_Quantity)
File_Name = process_Analysis_Data(Data_List, Backtest_Name)
files.download(File_Name)

'''



