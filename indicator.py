# -*- coding: utf-8 -*-
"""Indicator.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JNb1eAHpCCUhIBGLkCM45JB8q2EK8UW3
"""

from IPython.display import clear_output
import matplotlib.pyplot as plt
from tabulate import tabulate
import pandas as pd
import statistics
import zipfile
import gspread
from datetime import datetime

#=================================================================================================================================================================================================

# Extract_Zip   Extract_Zip   Extract_Zip   Extract_Zip   Extract_Zip   Extract_Zip   Extract_Zip   Extract_Zip   Extract_Zip   Extract_Zip   Extract_Zip   Extract_Zip   Extract_Zip
Options_Data = {}
Futures_Data = {}
def Extract_Zip(Expiry_Date, Options_Type = "op"):
    global Options_Data, Futures_Data
    # Agar Options ka Data Extract karna ho
    if Options_Type.lower() == "op":
       Options_Data = {}
       zip_path = f"/content/drive/MyDrive/Downlod_Options_Data/202324/{Expiry_Date}.zip"
       with zipfile.ZipFile(zip_path, 'r') as zip_ref:
            csv_files = [file for file in zip_ref.namelist() if file.endswith('.csv')]
            if Expiry_Date not in Options_Data:
               Options_Data[Expiry_Date] = {}
            for csv_file in csv_files:
                file_parts = csv_file.replace(".csv", "").split("_")
                Expiry, Strike = file_parts[0], file_parts[1]
                if Expiry not in Options_Data:
                   Options_Data[Expiry] = {}
                with zip_ref.open(csv_file) as file:
                     data = pd.read_csv(file)
                     Options_Data[Expiry_Date][Strike] = data
    # Agar Futures ka Data Extract karna ho
    if Options_Type.lower() == "fu":
       Futures_Data = {}
       zip_path = "/content/drive/MyDrive/Downlod_Options_Data/Nifty_Futures.zip"
       with zipfile.ZipFile(zip_path, 'r') as zip_ref:   # ✅ Yaha galti sahi ki hai
            csv_file = [file for file in zip_ref.namelist() if file.startswith(Expiry_Date)]
            if csv_file:
              with zip_ref.open(csv_file[0]) as file:
                    Futures_Data[Expiry_Date] = pd.read_csv(file)
            else:
                print(f"❌ No Data Found for {Expiry_Date}")

# Call Function
# Expiry_Date = "25-03-2021"
# Extract_Zip(Expiry_Date, "fu")
# print(Futures_Data[Expiry_Date].head())
#__________________________________________________________________________________________________________________________________

#  Read_Strike_Data    Read_Strike_Data    Read_Strike_Data    Read_Strike_Data    Read_Strike_Data    Read_Strike_Data    Read_Strike_Data
def Read_Strike_Data(Expiry, Strike, Date_Time="01-01-2000"):
    global Options_Data,Futures_Data
    try:
        Expiry = pd.to_datetime(Expiry, format="%d-%m-%Y").strftime("%d-%m-%Y")
        if Date_Time is not None:
            try:
                Date_Time = pd.to_datetime(Date_Time, format="%d-%m-%Y")
            except ValueError:
                try:
                    Date_Time = pd.to_datetime(Date_Time, format="%d-%m-%Y %H:%M")
                except ValueError:
                    Date_Time = pd.to_datetime(Date_Time, format="%d-%m-%Y %H:%M:%S")

        if int(Strike) != 0 :
           if Expiry not in Options_Data:
              Extract_Zip(Expiry)
           Strike_Data = Options_Data[Expiry][str(Strike)].copy()
           Strike_Data = pd.DataFrame(Strike_Data)
        if int(Strike) == 0 :
           if Expiry not in Futures_Data:
              Extract_Zip(Expiry, "fu")
           Strike_Data = Futures_Data[Expiry].copy()
           Strike_Data = pd.DataFrame(Strike_Data)

        Strike_Data['datetime'] = pd.to_datetime(Strike_Data['datetime'], format="%d-%m-%Y %H:%M:%S")
        filtered_data = Strike_Data[Strike_Data['datetime'] >= Date_Time].copy()
        filtered_data['datetime'] = filtered_data['datetime'].dt.strftime('%d-%m-%Y %H:%M')
        filtered_data['expiry_date'] = pd.to_datetime(filtered_data['expiry_date'], format='%d-%b-%Y').dt.strftime('%d-%m-%Y')
        data_list =  filtered_data

        return data_list

    except Exception as e:
        print(f"Read_Strike_Data Function Error: {e}")
        return None


# # Example usage
# Expiry = "25-03-2021"
# Strike = "FU"
# Date_Time = "20-03-2021"
# ATM_Data = Read_Strike_Data(Expiry, Strike,Date_Time)
# print(ATM_Data)
#____________________________________________________________________________________________________________________________________________

# get_Column_Value   get_Column_Value   get_Column_Value   get_Column_Value   get_Column_Value   get_Column_Value   get_Column_Value   get_Column_Value
def Read_Column_Value(DATA, column_Value, Row_Time):
    try:
        DATA.columns = [col.lower() for col in DATA.columns]
        Row_Time = pd.to_datetime(Row_Time, format="%d-%m-%Y %H:%M")
        DATA['datetime'] = pd.to_datetime(DATA['datetime'], format="%d-%m-%Y %H:%M")
        filtered_data = DATA[DATA['datetime'] == Row_Time]
        if not filtered_data.empty:
            return filtered_data[column_Value.lower()].iloc[0]
        else:
            # print("No matching row found for the given Row_Time.")
            return None
    except Exception as e:
        print(f"get_Column_Value Function Error: {e}")
        return None
# Next_Expiry = "25-01-2024"
# ATM = "22000"
# ATM_Data = MK.Read_Strike_Data(Next_Expiry, ATM)
# Row_Time = "01-01-2024 09:15"
# call_value = Read_Column_Value(ATM_Data, "call_close", Row_Time)
# print(call_value)
# put_value = Read_Column_Value(ATM_Data, "put_close", Row_Time)
# print(put_value)
# FU_Data = MK.Read_Strike_Data(Next_Expiry, "FU")
# Fu_value = Read_Column_Value(FU_Data, "FU_Close", Row_Time)
# print(Fu_value)
# #____________________________________________________________________________________________________________________________________________

# get_Options_Strike   get_Options_Strike   get_Options_Strike   get_Options_Strike   get_Options_Strike   get_Options_Strike   get_Options_Strike
def get_Options_Strike(Options_Type, ATM, Options_Strike, Strike_Gep = 50):
    try:
        parts = Options_Strike.split('-')
        letters = str(parts[0])
        number = int(parts[1])
        if Options_Type.lower() == "call":
            Value = ATM - (number * Strike_Gep) if letters.lower() == "itm" else ATM + (number * Strike_Gep) if letters.lower() == "otm" else ATM
        elif Options_Type.lower() == "put":
            Value = ATM + (number * Strike_Gep) if letters.lower() == "itm" else ATM - (number * Strike_Gep) if letters.lower() == "otm" else ATM
        return Value
    except Exception as e:
        print(f"option_prices Function Error: {e}")
# # Example usage:
# Options_Type = "call"
# Options_Strike = "otm-2"
# Strike_Gep = 100
# ATM = 1000
# prices = get_Options_Strike(Options_Type, ATM, Options_Strike, Strike_Gep)
# print(prices)
#__________________________________________________________________________________________________________________________________________________

# get_Value_In_Strike   get_Value_In_Strike   get_Value_In_Strike   get_Value_In_Strike   get_Value_In_Strike   get_Value_In_Strike   get_Value_In_Strike   get_Value_In_Strike
def get_Value_In_Strike(Expiry_Date, Options_Type, DateTime, Target_Premium, ATM_Strike=None, Start_Strikes_Type=None, End_Strikes_Type=None):
    try:
        if ATM_Strike is not None and Start_Strikes_Type is not None and End_Strikes_Type is not None:
            if Options_Type.lower() == "call":
                Start_Strikes = get_Options_Strike(Options_Type, ATM_Strike, Start_Strikes_Type)
                End_Strikes = get_Options_Strike(Options_Type, ATM_Strike, End_Strikes_Type)
            if Options_Type.lower() == "put":
                Start_Strikes = get_Options_Strike(Options_Type, ATM_Strike, End_Strikes_Type)
                End_Strikes = get_Options_Strike(Options_Type, ATM_Strike, Start_Strikes_Type)
        else:
            Start_Strikes, End_Strikes = 0, 100000

        # print(Start_Strikes, End_Strikes)

        Strike_Premium_list = []
        if Expiry_Date not in Options_Data:
            Extract_Zip(Expiry_Date)
        if Expiry_Date in Options_Data:
            All_Strikes_List = sorted(map(int, Options_Data[Expiry_Date].keys()))  # Sorting only once
            strikes_list = [strike for strike in All_Strikes_List if Start_Strikes <= strike <= End_Strikes]
            for strike in strikes_list:
                Strike_Data = Read_Strike_Data(Expiry_Date, strike)

                Premium = Read_Column_Value(Strike_Data, f"{Options_Type.lower()}_open", DateTime)
                if pd.notna(Premium) and (Target_Premium - 50) <= float(Premium) <= (Target_Premium + 50) :
                    Strike_Premium_list.append({"Strike": strike, "Premium": Premium})
        if Strike_Premium_list:
            nearest_strike = min(Strike_Premium_list, key=lambda x: abs(x["Premium"] - Target_Premium))
            return nearest_strike
        return {"Strike": None, "Premium": None}

    except Exception as e:
        print(f"get_Value_In_Strike Function Error: {e}")
        return {"Strike": None, "Premium": None}

# # Example usage:
# Expiry_Date = "26-12-2024"
# Options_Type = "call"
# DateTime = "26-12-2024 09:40"
# Target_Premium = 20
# ATM = 23900
# Start_Strikes_Type = "ATM-00"
# End_Strikes_Type = "OTM-15"
# Strike_Data = get_Value_In_Strike(Expiry_Date, Options_Type, DateTime, Target_Premium, ATM, Start_Strikes_Type, End_Strikes_Type)
# print(Strike_Data)
#__________________________________________________________________________________________________________________________________________________

#  Brokerage_Calculate   Brokerage_Calculate   Brokerage_Calculate   Brokerage_Calculate   Brokerage_Calculate   Brokerage_Calculate   Brokerage_Calculate
def Brokerage_Calculate(buy_price, sell_price, quantity, Options_Type="OP", Min_Brokerage = 20):
    try:
        turnover = (buy_price + sell_price) * quantity               # **Turnover Calculation**
        if Options_Type.lower() == "fu":  # **Futures Calculation**
            brokerage = min(0.0003 * turnover, Min_Brokerage) * 2    # ₹20 प्रति ऑर्डर, दोनों ओर के लिए ₹40
            stt = 0.0002 * sell_price * quantity                     # 0.02% केवल Sell Side
            transaction_charges = 0.0000183 * turnover               # 0.00183% NSE Transaction Charges
            sebi_charges = (10 / 10000000) * turnover                # ₹10 प्रति करोड़
            stamp_duty = round((0.00002 * buy_price * quantity),0)   # 0.002% (₹200/Crore) on Buy Side
        elif Options_Type.lower() == "call" or Options_Type.lower() == "put" : # **Options Calculation**
            option_premium = (buy_price + sell_price)
            turnover = option_premium * quantity
            brokerage = Min_Brokerage * 2                             # ₹20 प्रति ऑर्डर, दोनों ओर के लिए ₹40
            stt = 0.0005 * option_premium * quantity                  # 0.05% STT केवल Sell Side
            transaction_charges = 0.0003553 * turnover                # 0.03603% NSE Transaction Charges
            sebi_charges = (10 / 10000000) * turnover                 # ₹10 प्रति करोड़
            stamp_duty = round((0.00003 * buy_price * quantity),0)    # 0.003% (₹300/Crore) on Buy Side
        gst = 0.18 * (brokerage + transaction_charges + sebi_charges) # GST Calculation
        total_charges = brokerage + stt + transaction_charges + gst + sebi_charges + stamp_duty
        return round(total_charges, 2)
    except Exception as e:
        print(f"Brokerage_Calculate Function Error: {e}")
        return 0

# # **Example Calculation for Futures**
# futures_result = Brokerage_Calculate(buy_price=25000, sell_price=25000, quantity=300, segment="FU")
# print(f"Futures Charges: {futures_result:.2f}")
# # **Example Calculation for Options**
# options_result = Brokerage_Calculate(buy_price=200, sell_price=200, quantity=300 , segment="OP")
# print(f"Options Charges: {options_result:.2f}")
#_______________________________________________________________________________________________________________________________________________________________



#============================================================================================================================================================================================


# Nifty_Data_Read  Nifty_Data_Read  Nifty_Data_Read  Nifty_Data_Read  Nifty_Data_Read  Nifty_Data_Read  Nifty_Data_Read  Nifty_Data_Read  Nifty_Data_Read
def Nifty_Data_Read():
    global Nifty_Data, Open_Trading_Day, Expiry_List, Monthly_Expiry_List
    try:
        Path = "/content/drive/MyDrive/Downlod_Options_Data/NIFTY_DATA.csv"
        Nifty_Data = pd.read_csv(Path)
        Nifty_Data["Date"] = pd.to_datetime(Nifty_Data["Date"], format="%d-%m-%Y", errors="coerce")
        Nifty_Data["Date_Time"] = pd.to_datetime(Nifty_Data["Date_Time"], format="%d-%m-%Y %H:%M", errors="coerce")
        Nifty_Data["Current_Expiry"] = pd.to_datetime(Nifty_Data["Current_Expiry"], format="%d-%m-%Y", errors="coerce")
        Nifty_Data["Monthly_Expiry"] = pd.to_datetime(Nifty_Data["Monthly_Expiry"], format="%d-%m-%Y", errors="coerce")
        # print(Nifty_Data)
        Nifty_Data.dropna(subset=["Date", "Date_Time", "Current_Expiry"], inplace=True)
        Nifty_Data.sort_values(by="Date_Time", ascending=True, inplace=True)
        unique_dates = Nifty_Data["Date"].dt.strftime("%d-%m-%Y").dropna().unique()
        Open_Trading_Day = sorted(unique_dates, key=lambda x: pd.to_datetime(x, dayfirst=True))
        unique_Expiry = Nifty_Data["Current_Expiry"].dt.strftime("%d-%m-%Y").dropna().unique()
        Expiry_List = sorted(unique_Expiry, key=lambda x: pd.to_datetime(x, dayfirst=True))
        unique_Monthly_Expiry = Nifty_Data["Monthly_Expiry"].dt.strftime("%d-%m-%Y").dropna().unique()
        Monthly_Expiry_List = sorted(unique_Monthly_Expiry, key=lambda x: pd.to_datetime(x, dayfirst=True))
        Nifty_Data.reset_index(drop=True, inplace=True)
        Nifty_Data["Date"] = Nifty_Data["Date"].dt.strftime("%d-%m-%Y")
        Nifty_Data["Date_Time"] = Nifty_Data["Date_Time"].dt.strftime("%d-%m-%Y %H:%M")
        Nifty_Data["Current_Expiry"] = Nifty_Data["Current_Expiry"].dt.strftime("%d-%m-%Y")
        Nifty_Data["Monthly_Expiry"] = Nifty_Data["Monthly_Expiry"].dt.strftime("%d-%m-%Y")
    except Exception as e:
        print(f"Nifty_Data_Read Function Error: {e}")
Nifty_Data_Read()
#______________________________________________________________________________________________________________________________________
# get_Nifty_Data  get_Nifty_Data  get_Nifty_Data  get_Nifty_Data  get_Nifty_Data  get_Nifty_Data  get_Nifty_Data  get_Nifty_Data  get_Nifty_Data
def get_Nifty_Data(Start_Date, End_Date, TimeFrame = None): # "5min", "15min", "1H", "1D"
    global Nifty_Data
    Datas = Nifty_Data.copy()
    try:
        try:
           Start_Date = pd.to_datetime(Start_Date, format="%d-%m-%Y %H:%M")
        except:
           Start_Date = pd.to_datetime(Start_Date, format="%d-%m-%Y")
        try:
           End_Date = pd.to_datetime(End_Date, format="%d-%m-%Y %H:%M")
        except:
           End_Date = pd.to_datetime(End_Date, format="%d-%m-%Y")

        Datas["Date_Time"] = pd.to_datetime(Datas["Date_Time"], format="%d-%m-%Y %H:%M")
        Datas = Datas[(Datas["Date_Time"] >= Start_Date) & (Datas["Date_Time"] <= End_Date)].copy()
        Datas["Date_Time"] = Datas["Date_Time"].dt.strftime("%d-%m-%Y %H:%M")
        if TimeFrame is None:
            return Datas
        else:
            Data = Datas.copy()
            if Data.index.name == 'Date_Time':
              Data = Data.reset_index()
            Data['Date_Time'] = pd.to_datetime(Data['Date_Time'], format='%d-%m-%Y %H:%M', errors='coerce')
            Data.dropna(subset=['Date_Time'], inplace=True)
            Data.set_index('Date_Time', inplace=True)
            Data = Data.between_time('09:15', '15:30')
            data_resampled = Data.resample(TimeFrame, origin='start').agg({
                'Symbol': 'first', 'Date': 'first', 'Day_No': 'first', 'Day': 'first', 'Current_Expiry': 'first',
                'Next_Expiry': 'first', 'Next_To_Next_Expiry': 'first', 'Monthly_Expiry': 'first','Next_Monthly_Expiry': 'first' ,
                'Open': 'first', 'High': 'max', 'Low': 'min', 'Close': 'last','ATM': 'first' }).dropna()
            data_resampled.reset_index(inplace=True)
            data_resampled['Date_Time'] = data_resampled['Date_Time'].dt.strftime('%d-%m-%Y %H:%M')
            data_resampled = pd.DataFrame(data_resampled).copy()
            column = ["Date_Time","Symbol", "Date", "Day_No", "Day", "Current_Expiry",
                      "Next_Expiry", "Next_To_Next_Expiry", "Monthly_Expiry",
                      "Next_Monthly_Expiry", "Open", "High", "Low", "Close", "ATM"]
            data_resampled = data_resampled[column]
            return data_resampled
    except Exception as e:
        print(f"get_Nifty_Data Function Error: {e}")
# # Example usage
# Start_Date = "01-01-2024 10:00"
# End_Date = "31-01-2024"
# TimeFrame = "5min" # "5min", "15min", "1H", "1D"
# Nifty_Data1 = get_Nifty_Data(Start_Date, End_Date, TimeFrame)
# print(Nifty_Data1.head(5))
#______________________________________________________________________________________________________________________________________________

# get_Nifty_ATM  get_Nifty_ATM   get_Nifty_ATM   get_Nifty_ATM   get_Nifty_ATM   get_Nifty_ATM   get_Nifty_ATM   get_Nifty_ATM   get_Nifty_ATM
def get_Nifty_ATM(DateTime_ATM):
    global Nifty_Data
    try:
        Data = Nifty_Data.copy()
        try:
           Start_Date = pd.to_datetime(DateTime_ATM, format="%d-%m-%Y %H:%M")
        except:
           Start_Date = pd.to_datetime(DateTime_ATM, format="%d-%m-%Y").strftime('%d-%m-%Y 09:15')
        Data["Date_Time"] = pd.to_datetime(Data["Date_Time"], format="%d-%m-%Y %H:%M")
        Data = Data[(Data["Date_Time"] == Start_Date) ].copy()
        Data["Date_Time"] = Data["Date_Time"].dt.strftime("%d-%m-%Y %H:%M")
        ATM = Data["ATM"].iloc[0]
        return ATM
    except Exception as e:
        print(f"get_Nifty_ATM Function Error: {e}")
        return None
# # Example usage
# DateTime_ATM = "28-12-2023 15:25"
# ATM = get_Nifty_ATM(DateTime_ATM)
# print(ATM)
#_________________________________________________________________________________________________________________________________

# Get_BTST_Date  Get_BTST_Date  Get_BTST_Date  Get_BTST_Date  Get_BTST_Date  Get_BTST_Date  Get_BTST_Date  Get_BTST_Date
def Get_BTST_Date(Date, Get_Day_No = 1):
    global Open_Trading_Day
    try :
        Date = pd.to_datetime(Date, format="%d-%m-%Y")
        Open_Trading_Day = pd.to_datetime(pd.Series(Open_Trading_Day), format="%d-%m-%Y")
        filtered_dates = Open_Trading_Day[Open_Trading_Day > Date].sort_values()
        filtered_dates = filtered_dates.dt.strftime("%d-%m-%Y").tolist()
        get_Date = filtered_dates[(int(Get_Day_No) - 1)]
        return get_Date
    except Exception as e:
        print(f"Get_BTST_Date Function Error: {e}")
# # Example usage
# Date = "05-01-2025"
# Get_Day_No = 1
# BTST_Date = Get_BTST_Date(Date)
# print(BTST_Date)
#________________________________________________________________________________________________________________________________

# get_trading_Day_List  get_trading_Day_List  get_trading_Day_List  get_trading_Day_List  get_trading_Day_List  get_trading_Day_List
def get_trading_Day_List(Start_Date, End_Date):
  try:
    global Open_Trading_Day
    Start_Date = pd.to_datetime(Start_Date, format="%d-%m-%Y")
    End_Date = pd.to_datetime(End_Date, format="%d-%m-%Y")
    Open_Trading_Day = pd.to_datetime(pd.Series(Open_Trading_Day), format="%d-%m-%Y")
    filtered_dates = Open_Trading_Day[(Open_Trading_Day >= Start_Date) & (Open_Trading_Day <= End_Date)]
    filtered_dates = filtered_dates.sort_values().dt.strftime("%d-%m-%Y").tolist()
    return filtered_dates
  except Exception as e:
    print(f"get_trading_Day_List Function Error: {e}")

# # Example usage
# Start_Date = "01-01-2024"
# End_Date = "10-01-2024"
# filtered_dates = get_trading_Day_List(Start_Date, End_Date)
# print(filtered_dates)
#______________________________________________________________________________________________________________________________________

# Expiry_DayToAgo  Expiry_DayToAgo  Expiry_DayToAgo  Expiry_DayToAgo  Expiry_DayToAgo  Expiry_DayToAgo  Expiry_DayToAgo
def Expiry_DayToAgo(Date, Get_Day_No = 1):
    global Open_Trading_Day
    try :
        Date = pd.to_datetime(Date, format="%d-%m-%Y")
        Open_Trading_Day = pd.to_datetime(pd.Series(Open_Trading_Day), format="%d-%m-%Y")
        filtered_dates = Open_Trading_Day[Open_Trading_Day < Date].sort_values()
        filtered_dates = filtered_dates.dt.strftime("%d-%m-%Y").tolist()
        get_Date = filtered_dates[(int(Get_Day_No) * - 1)]
        return get_Date
    except Exception as e:
        print(f"Get_BTST_Date Function Error: {e}")
# # Example usage
# Expiry_Date = "09-01-2025"
# Get_Day_No = 2
# BTST_Date = Expiry_DayToAgo(Expiry_Date,Get_Day_No)
# print(BTST_Date)
#______________________________________________________________________________________________________________________


#===========================================================================================================================================================